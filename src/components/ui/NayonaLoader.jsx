import { useState, useEffect } from 'react';

const NayonaLoader = ({ onLoadingComplete }) => {
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate loading time
    const timer = setTimeout(() => {
      setIsLoading(false);
      if (onLoadingComplete) {
        onLoadingComplete();
      }
    },3500); // Increased duration for longer path

    return () => clearTimeout(timer);
  }, [onLoadingComplete]);

  return (
    <div className={`fixed inset-0 flex items-center justify-center bg-black transition-opacity duration-500 ${!isLoading ? 'opacity-0 pointer-events-none' : 'opacity-100'}`}>
      <div className="w-64 h-32">
        <svg 
          viewBox="0 0 140 30" 
          fill="none" 
          xmlns="http://www.w3.org/2000/svg"
          className="w-full h-full"
        >
          <path 
            d="M10.44 0.959999C12.1467 0.959999 13.6267 1.29333 14.88 1.96C16.16 2.6 17.1467 3.58667 17.84 4.92C18.56 6.22667 18.92 7.85333 18.92 9.8V22H16.92V9.96C16.92 7.61333 16.32 5.82667 15.12 4.6C13.9467 3.37333 12.2933 2.76 10.16 2.76C8.53333 2.76 7.12 3.09333 5.92 3.76C4.72 4.42667 3.8 5.36 3.16 6.56C2.54667 7.76 2.24 9.2 2.24 10.88V22H0.24V1.12H2.16V6.92L1.88 6.28C2.52 4.62667 3.57333 3.33333 5.04 2.4C6.50667 1.44 8.30667 0.959999 10.44 0.959999ZM40.0341 22V17.36L39.9141 16.6V8.84C39.9141 7.05333 39.4074 5.68 38.3941 4.72C37.4074 3.76 35.9274 3.28 33.9541 3.28C32.5941 3.28 31.3007 3.50667 30.0741 3.96C28.8474 4.41333 27.8074 5.01333 26.9541 5.76L25.6741 3.64C26.7407 2.73333 28.0207 2.04 29.5141 1.56C31.0074 1.05333 32.5807 0.799999 34.2341 0.799999C36.9541 0.799999 39.0474 1.48 40.5141 2.84C42.0074 4.17333 42.7541 6.21333 42.7541 8.96V22H40.0341ZM32.7941 22.2C31.2207 22.2 29.8474 21.9467 28.6741 21.44C27.5274 20.9067 26.6474 20.1867 26.0341 19.28C25.4207 18.3467 25.1141 17.28 25.1141 16.08C25.1141 14.9867 25.3674 14 25.8741 13.12C26.4074 12.2133 27.2607 11.4933 28.4341 10.96C29.6341 10.4 31.2341 10.12 33.2341 10.12H40.4741V12.24H33.3141C31.2874 12.24 29.8741 12.6 29.0741 13.32C28.3007 14.04 27.9141 14.9333 27.9141 16C27.9141 17.2 28.3807 18.16 29.3141 18.88C30.2474 19.6 31.5541 19.96 33.2341 19.96C34.8341 19.96 36.2074 19.6 37.3541 18.88C38.5274 18.1333 39.3807 17.0667 39.9141 15.68L40.5541 17.64C40.0207 19.0267 39.0874 20.1333 37.7541 20.96C36.4474 21.7867 34.7941 22.2 32.7941 22.2ZM50.2372 29.96C49.2505 29.96 48.3039 29.8 47.3972 29.48C46.5172 29.16 45.7572 28.68 45.1172 28.04L46.4372 25.92C46.9705 26.4267 47.5439 26.8133 48.1572 27.08C48.7972 27.3733 49.5039 27.52 50.2772 27.52C51.2105 27.52 52.0105 27.2533 52.6772 26.72C53.3705 26.2133 54.0239 25.3067 54.6372 24L55.9972 20.92L56.3172 20.48L64.9572 0.999999H67.7572L57.2372 24.52C56.6505 25.88 55.9972 26.96 55.2772 27.76C54.5839 28.56 53.8239 29.12 52.9972 29.44C52.1705 29.7867 51.2505 29.96 50.2372 29.96ZM55.8372 22.6L46.1572 0.999999H49.1172L57.6772 20.28L55.8372 22.6ZM79.7309 22.2C77.7043 22.2 75.8776 21.7467 74.2509 20.84C72.6509 19.9067 71.3843 18.64 70.4509 17.04C69.5176 15.4133 69.0509 13.56 69.0509 11.48C69.0509 9.37333 69.5176 7.52 70.4509 5.92C71.3843 4.32 72.6509 3.06667 74.2509 2.16C75.8509 1.25333 77.6776 0.799999 79.7309 0.799999C81.8109 0.799999 83.6509 1.25333 85.2509 2.16C86.8776 3.06667 88.1443 4.32 89.0509 5.92C89.9843 7.52 90.4509 9.37333 90.4509 11.48C90.4509 13.56 89.9843 15.4133 89.0509 17.04C88.1443 18.64 86.8776 19.9067 85.2509 20.84C83.6243 21.7467 81.7843 22.2 79.7309 22.2ZM79.7309 19.68C81.2509 19.68 82.5976 19.3467 83.7709 18.68C84.9443 17.9867 85.8643 17.0267 86.5309 15.8C87.2243 14.5467 87.5709 13.1067 87.5709 11.48C87.5709 9.82667 87.2243 8.38667 86.5309 7.16C85.8643 5.93333 84.9443 4.98667 83.7709 4.32C82.5976 3.62667 81.2643 3.28 79.7709 3.28C78.2776 3.28 76.9443 3.62667 75.7709 4.32C74.5976 4.98667 73.6643 5.93333 72.9709 7.16C72.2776 8.38667 71.9309 9.82667 71.9309 11.48C71.9309 13.1067 72.2776 14.5467 72.9709 15.8C73.6643 17.0267 74.5976 17.9867 75.7709 18.68C76.9443 19.3467 78.2643 19.68 79.7309 19.68ZM106.969 0.799999C108.676 0.799999 110.169 1.13333 111.449 1.8C112.756 2.44 113.769 3.42667 114.489 4.76C115.236 6.09333 115.609 7.77333 115.609 9.8V22H112.769V10.08C112.769 7.86667 112.209 6.2 111.089 5.08C109.996 3.93333 108.449 3.36 106.449 3.36C104.956 3.36 103.649 3.66667 102.529 4.28C101.436 4.86667 100.582 5.73333 99.9691 6.88C99.3824 8 99.0891 9.36 99.0891 10.96V22H96.2491V0.999999H98.9691V6.76L98.5291 5.68C99.1957 4.16 100.262 2.97333 101.729 2.12C103.196 1.24 104.942 0.799999 106.969 0.799999ZM136.44 22V17.36L136.32 16.6V8.84C136.32 7.05333 135.814 5.68 134.8 4.72C133.814 3.76 132.334 3.28 130.36 3.28C129 3.28 127.707 3.50667 126.48 3.96C125.254 4.41333 124.214 5.01333 123.36 5.76L122.08 3.64C123.147 2.73333 124.427 2.04 125.92 1.56C127.414 1.05333 128.987 0.799999 130.64 0.799999C133.36 0.799999 135.454 1.48 136.92 2.84C138.414 4.17333 139.16 6.21333 139.16 8.96V22H136.44ZM129.2 22.2C127.627 22.2 126.254 21.9467 125.08 21.44C123.934 20.9067 123.054 20.1867 122.44 19.28C121.827 18.3467 121.52 17.28 121.52 16.08C121.52 14.9867 121.774 14 122.28 13.12C122.814 12.2133 123.667 11.4933 124.84 10.96C126.04 10.4 127.64 10.12 129.64 10.12H136.88V12.24H129.72C127.694 12.24 126.28 12.6 125.48 13.32C124.707 14.04 124.32 14.9333 124.32 16C124.32 17.2 124.787 18.16 125.72 18.88C126.654 19.6 127.96 19.96 129.64 19.96C131.24 19.96 132.614 19.6 133.76 18.88C134.934 18.1333 135.787 17.0667 136.32 15.68L136.96 17.64C136.427 19.0267 135.494 20.1333 134.16 20.96C132.854 21.7867 131.2 22.2 129.2 22.2Z"
            className="text-white"
            style={{
              strokeDasharray: 2000,
              strokeDashoffset: 2000,
              animation: 'drawPath 3s ease forwards'
            }}
          />
        </svg>
      </div>
      <style jsx>{`
        @keyframes drawPath {
          to {
            stroke-dashoffset: 0;
          }
        }
        path {
          stroke: currentColor;
          stroke-width: 1;
          fill-opacity: 0;
          animation: fillPath 0.5s ease forwards 2.5s;
        }
        @keyframes fillPath {
          from {
            fill-opacity: 0;
          }
          to {
            fill-opacity: 1;
          }
        }
      `}</style>
    </div>
  );
};

export default NayonaLoader;